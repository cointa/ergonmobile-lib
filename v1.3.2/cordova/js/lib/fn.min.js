app.fn={},app.fn.getProfile=(instance,username,onFound,onNotFound)=>{app.fn.getProfiles(data=>{const found=data.profiles.find(profile=>profile.instance===instance&&profile.username===username);found?onFound(found):onNotFound()},()=>onNotFound())},app.fn.getProfiles=(onSuccess,onFail)=>{app.file.readLocalJSON(cordova.file.dataDirectory,"profiles.json",data=>onSuccess(data),err=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"profiles.json",{profiles:[]},data=>{app.firstRun=!0,onSuccess(data)},err=>onFail(err))})},app.fn.setSharedData=(data,onSuccess,onFail)=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"shared.json",data,data=>onSuccess(),err=>onFail(err))},app.fn.getSharedData=(onSuccess,onFail)=>{app.file.readLocalJSON(cordova.file.dataDirectory,"shared.json",data=>{app.fn.isEmptyObj(data)?onFail():onSuccess(data)},err=>onFail(err))},app.fn.editProfile=(index,profile,onSuccess,onFail)=>{app.fn.getProfiles(data=>{index>-1?(FCMPlugin.unsubscribeFromTopic(`${data.profiles[index].instance}.${data.profiles[index].username}`),data.profiles[index]=profile,profile.notifications&&FCMPlugin.subscribeToTopic(`${profile.instance}.${profile.username}`)):(data.profiles.push(profile),profile.notifications&&FCMPlugin.subscribeToTopic(`${profile.instance}.${profile.username}`)),app.fn.storeProfiles(data,data=>onSuccess(data),err=>onFail(err))},err=>onFail(err))},app.fn.updateProfile=(profile,onSuccess,onFail)=>{app.fn.isNewProfile(profile,data=>{data.profiles.push(profile),FCMPlugin.subscribeToTopic(`${profile.instance}.${profile.username}`)},(data,i)=>{FCMPlugin.unsubscribeFromTopic(`${data.profiles[i].instance}.${data.profiles[i].username}`),data.profiles[i]=profile,FCMPlugin.subscribeToTopic(`${profile.instance}.${profile.username}`)},data=>{app.fn.storeProfiles(data,()=>onSuccess(),err=>onFail(err))})},app.fn.newProfile=()=>{const profile={instance:"",license:"",deviceid:"",username:"",password:"",url:"",notifications:!0};return Object.seal(profile),profile},app.fn.mergeProfile=obj=>{const profile=app.fn.newProfile();for(const[key,value]of Object.entries(obj))profile.hasOwnProperty(key)&&value&&value.length>0&&(profile[key]=value);return profile},app.fn.isNewProfile=(profile,onSuccess,onFail,onEnd)=>{app.fn.getProfiles(data=>{const index=data.profiles.findIndex(item=>item.instance===profile.instance&&item.username===profile.username);index>-1?onFail(data,index):onSuccess(data),onEnd(data)},err=>onFail(err))},app.fn.storeProfiles=(data,onSuccess,onFail)=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"profiles.json",data,data=>onSuccess(data),err=>onFail(err))},app.fn.init=(onSuccess,onFail)=>{app.fn.clearCache(),app.fn.getProfiles(data=>{app.fn.log("Profiles successfully readed/initialized."),onSuccess()},err=>{app.fn.log(err.name+" while reading/initializing profiles."),onFail()})},app.fn.getEntryPoint=(onSuccess,onFail)=>{let i=0;!function test(){if(i<app.config.entrypoints.length){let URL=app.config.entrypoints[i];app.fn.log("### Testing ---\x3e "+URL),cordova.plugin.http.get(URL,null,null,response=>{app.fn.log("### URL ---\x3e "+URL+" found. OK."),onSuccess(URL)},response=>{app.fn.log("### URL ---\x3e "+URL+" not available. Skipping..."),i++,test(i)})}else onFail()}(i)},app.fn.clearCache=()=>{"browser"!==device.platform&&window.CacheClear(()=>app.fn.log("Cache successfully cleared."),()=>app.fn.log("An error occurred while clearing cache."))},app.fn.isEmptyObj=obj=>{for(let prop in obj)if(obj.hasOwnProperty(prop))return!1;return!0},app.fn.log=msg=>{app.config.debug&&console.log(msg)},app.fn.httpCall=(url,method,data,headers,onSuccess,onFail)=>{const options={method:method,data:data,headers:headers},start=url.indexOf("?");if(start>=0){const end=url.indexOf("/",start)-start,qs=url.substr(start,end);url=url.replace(qs,""),url+=qs}cordova.plugin.http.sendRequest(url,options,response=>onSuccess(response),response=>onFail(response))},app.fn.httpGet=(url,onSuccess,onFail)=>{app.fn.httpCall(url,"get",{},{},response=>onSuccess(response),response=>onFail(response))},app.fn.httpPost=(url,data,onSuccess,onFail)=>{app.fn.httpCall(url,"post",data,{"Content-Type":"application/json"},response=>onSuccess(response),response=>onFail(response))},app.fn.wsLogin=(profile,onSuccess,onError)=>{const md5pwd=md5(profile.password);app.fn.httpPost(`${profile.url}/ws/login/${profile.username}/${md5pwd}`,{},response=>onSuccess(response),response=>onError(response))},app.fn.wsLoggedCall=(url,method,data,profile,onSuccess,onError)=>{let tries=0;const cookieKey=`JSESSIONID.${profile.instance}.${profile.username}`,httpCall=()=>app.fn.httpCall(url,method,data,{"Content-Type":"application/json"},response=>onSuccess(response),response=>{403===response.status&&tries<3?(tries++,this.wsLogin(profile,response=>{localStorage[cookieKey]=response.data,cordova.plugin.http.setCookie(url,`JSESSIONID=${localStorage[cookieKey]}`,null),httpCall()},response=>onError(response))):onError(response)});localStorage[cookieKey]&&cordova.plugin.http.setCookie(url,`JSESSIONID=${localStorage[cookieKey]}`,null),httpCall()},app.fn.wsLoggedGet=(url,profile,onSuccess,onFail)=>{app.fn.wsLoggedCall(url,"get",{},profile,response=>onSuccess(response),response=>onFail(response))},app.fn.wsLoggedPost=(url,profile,data,onSuccess,onFail)=>{app.fn.wsLoggedCall(url,"post",data,profile,response=>onSuccess(response),response=>onFail(response))};