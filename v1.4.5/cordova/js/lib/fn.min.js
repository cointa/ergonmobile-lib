app.fn={},app.fn.getProfile=((e,n,p,a)=>{app.fn.getProfiles(o=>{const i=o.profiles.find(p=>p.instance===e&&p.username===n);i?p(i):a()},()=>a())}),app.fn.getProfiles=((e,n)=>{app.file.readLocalJSON(cordova.file.dataDirectory,"profiles.json",n=>e(n),p=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"profiles.json",{profiles:[]},n=>{app.firstRun=!0,e(n)},e=>n(e))})}),app.fn.setSharedData=((e,n,p)=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"shared.json",e,e=>n(),e=>p(e))}),app.fn.getSharedData=((e,n)=>{app.file.readLocalJSON(cordova.file.dataDirectory,"shared.json",p=>{app.fn.isEmptyObj(p)?n():e(p)},e=>n(e))}),app.fn.editProfile=((e,n,p,a)=>{app.fn.getProfiles(o=>{e>-1?(FCM.unsubscribeFromTopic(`${o.profiles[e].instance}.${o.profiles[e].username}`),o.profiles[e]=n,n.notifications&&FCM.subscribeToTopic(`${n.instance}.${n.username}`)):(o.profiles.push(n),n.notifications&&FCM.subscribeToTopic(`${n.instance}.${n.username}`)),app.fn.storeProfiles(o,e=>p(e),e=>a(e))},e=>a(e))}),app.fn.updateProfile=((e,n,p)=>{app.fn.isNewProfile(e,n=>{n.profiles.push(e),FCM.subscribeToTopic(`${e.instance}.${e.username}`)},(n,p)=>{FCM.unsubscribeFromTopic(`${n.profiles[p].instance}.${n.profiles[p].username}`),n.profiles[p]=e,FCM.subscribeToTopic(`${e.instance}.${e.username}`)},e=>{app.fn.storeProfiles(e,()=>n(),e=>p(e))})}),app.fn.newProfile=(()=>{const e={instance:"",license:"",deviceid:"",username:"",password:"",url:"",notifications:!0};return Object.seal(e),e}),app.fn.mergeProfile=(e=>{const n=app.fn.newProfile();for(const[p,a]of Object.entries(e))n.hasOwnProperty(p)&&a&&a.length>0&&(n[p]=a);return n}),app.fn.isNewProfile=((e,n,p,a)=>{app.fn.getProfiles(o=>{const i=o.profiles.findIndex(n=>n.instance===e.instance&&n.username===e.username);i>-1?p(o,i):n(o),a(o)},e=>p(e))}),app.fn.storeProfiles=((e,n,p)=>{app.file.writeLocalJSON(cordova.file.dataDirectory,"profiles.json",e,e=>n(e),e=>p(e))}),app.fn.init=((e,n)=>{app.fn.clearCache(),app.fn.getProfiles(n=>{app.fn.log("Profiles successfully readed/initialized."),e()},e=>{app.fn.log(e.name+" while reading/initializing profiles."),n()})}),app.fn.getEntryPoint=((e,n)=>{let p=0;!function a(){if(p<app.config.entrypoints.length){let n=app.config.entrypoints[p];app.fn.log("### Testing ---\x3e "+n),cordova.plugin.http.get(n,null,null,p=>{app.fn.log("### URL ---\x3e "+n+" found. OK."),e(n)},e=>{app.fn.log("### URL ---\x3e "+n+" not available. Skipping..."),p++,a()})}else n()}()}),app.fn.clearCache=(()=>{"browser"!==device.platform&&window.CacheClear(()=>app.fn.log("Cache successfully cleared."),()=>app.fn.log("An error occurred while clearing cache."))}),app.fn.isEmptyObj=(e=>{for(let n in e)if(e.hasOwnProperty(n))return!1;return!0}),app.fn.log=(e=>{app.config.debug&&console.log(e)}),app.fn.httpCall=((e,n,p,a,o,i)=>{const t={method:n,data:p,headers:a},s=e.indexOf("?");if(s>=0){const n=e.indexOf("/",s)-s,p=e.substr(s,n);e=e.replace(p,""),e+=p}cordova.plugin.http.sendRequest(e,t,e=>o(e),e=>i(e))}),app.fn.httpGet=((e,n,p)=>{app.fn.httpCall(e,"get",{},{},e=>n(e),e=>p(e))}),app.fn.httpPost=((e,n,p,a)=>{app.fn.httpCall(e,"post",n,{"Content-Type":"application/json"},e=>p(e),e=>a(e))}),app.fn.wsLogin=((e,n,p)=>{const a=md5(e.password);app.fn.httpPost(`${e.url}/ws/login/${e.username}/${a}`,{},e=>n(e),e=>p(e))}),app.fn.wsLoggedCall=((e,n,p,a,o,i)=>{let t=0;const s=`JSESSIONID.${a.instance}.${a.username}`,r=()=>app.fn.httpCall(e,n,p,{"Content-Type":"application/json"},e=>o(e),n=>{403===n.status&&t<3?(t++,this.wsLogin(a,n=>{localStorage[s]=n.data,cordova.plugin.http.setCookie(e,`JSESSIONID=${localStorage[s]}`,null),r()},e=>i(e))):i(n)});localStorage[s]&&cordova.plugin.http.setCookie(e,`JSESSIONID=${localStorage[s]}`,null),r()}),app.fn.wsLoggedGet=((e,n,p,a)=>{app.fn.wsLoggedCall(e,"get",{},n,e=>p(e),e=>a(e))}),app.fn.wsLoggedPost=((e,n,p,a,o)=>{app.fn.wsLoggedCall(e,"post",p,n,e=>a(e),e=>o(e))});app.fn.checkNotificationPermission=async function(){await FCM.requestPushPermission({ios9Support:{timeout:10,interval:.3}})};